<div id="scene-container" class="fixed top-0 w-full h-full -z-10"></div>

<script>
  import * as THREE from 'three';

  const $container = document.getElementById('scene-container');
  let w = window.innerWidth;
  let h = window.innerHeight;

  // Inicializar Three.js
  const scene = new THREE.Scene();

  // Cámara
  const camera = new THREE.PerspectiveCamera(75, w / h, 0.1, 1000);
  camera.position.z = 50;
  scene.add(camera);

  // Renderizador
  const renderer = new THREE.WebGLRenderer({ alpha: true });
  renderer.setSize(w, h);
  $container?.appendChild(renderer.domElement);

  // Luz
  const light = new THREE.AmbientLight(0xffffff, 0.5);
  scene.add(light);

  // Fondo de estrellas
  const starGeo = new THREE.BufferGeometry();
  const starVertices = [];
  const NUM_OF_PARTICLES = 1000;

  for (let i = 0; i < NUM_OF_PARTICLES; i++) {
    starVertices.push(
      Math.random() * 800 - 400, // X
      Math.random() * 800 - 400, // Y
      Math.random() * 1600 - 800 // Z
    );
  }

  starGeo.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));

  const starMaterial = new THREE.PointsMaterial({
    color: 0xffffff,
    size: 2,
  });

  const stars = new THREE.Points(starGeo, starMaterial);
  scene.add(stars);

  // Cargar la textura y aplicarla a la esfera
  const textureLoader = new THREE.TextureLoader();
  textureLoader.load('/asteroid.jpg', (texture) => {
    const sphereGeometry = new THREE.SphereGeometry(10, 32, 32); // Esfera en vez de cubo
    const sphereMaterial = new THREE.MeshStandardMaterial({ map: texture });
    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
    sphere.position.z = 0;
    scene.add(sphere);

    function resize(){
      w = window.innerWidth;
      h = window.innerHeight;

      camera.aspect = w / h
      camera.updateProjectionMatrix()
      renderer.setSize(w,h)
    }

    function animate() {
      requestAnimationFrame(animate);

      // Movimiento del fondo de estrellas
      let positions = starGeo.attributes.position.array;
      for (let i = 2; i < positions.length; i += 3) {
        positions[i] -= 0.5;
        if (positions[i] < -800) positions[i] = 800;
      }
      starGeo.attributes.position.needsUpdate = true;

      // Animación de la esfera
      sphere.rotation.y += 0.01;

      renderer.render(scene, camera);
    }

    animate();
    window.addEventListener("resize", resize);
  });
</script>

